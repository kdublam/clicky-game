{"version":3,"sources":["components/ImgCard/index.js","components/Wrapper/index.js","components/Score/index.js","components/Footer/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["ImgCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","event","handleClick","Wrapper","children","Score","class","href","score","highscore","Footer","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","clickedImg","friends","shuffle","textinput","bind","assertThisInitialized","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","includes","newArray","setState","alert","push","_this2","components_Wrapper","map","friend","index","components_ImgCard","key","components_Score","components_Footer","React","Component","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3f2fc31.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst ImgCard = props => {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} onClick={event => props.handleClick(event, props.name)}/>\n      </div>\n    </div>\n  )\n}\n\nexport default ImgCard;  ","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return (\n    <div className=\"container gameGrid\">\n      <div className=\"row\">\n          {props.children}\n    </div>\n  </div>\n  )\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\"\n\nconst Score = props => {\n  return (\n    <nav class=\"navbar fixed-top navbar-light\">\n      <a class=\"navbar-brand\" href=\"#\"></a><h4>Your Score: {props.score}</h4>\n      <h4>High Score: {props.highscore}</h4>\n    </nav>\n  )\n}\n\nexport default Score;  ","import React from \"react\";\nimport \"./style.css\"\n\nconst Footer = props => {\n  return (\n    <nav className=\"navbar fixed-bottom navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"https://github.com/kdublam/clicky-game\">Github Repo</a>\n      <a href=\"https://www.linkedin.com/in/kevinwlam7\">Creator: Kevin Lam</a>\n</nav>\n  )\n}\n\nexport default Footer;  ","import React from \"react\"\nimport friends from \"../../friends.json\"\nimport ImgCard from \"../ImgCard\"\nimport Wrapper from \"../Wrapper\"\nimport Score from \"../Score\"\nimport Footer from \"../Footer\"\nimport \"./style.css\"\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      clickedImg: [],\n      friends: this.shuffle(friends),\n      score: 0,\n      highscore: 5,\n      textinput: \"\"\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  handleClick(event, name) {\n    const clickedImg = this.state.clickedImg\n    let highscore = this.state.highscore\n    let score = this.state.score\n    if (!clickedImg.includes(name)) {\n      let score = this.state.score\n      clickedImg.push(name)\n      score++\n      let newArray = this.shuffle(this.state.friends)\n      this.setState({\n        friends: newArray,\n        clickedImg: clickedImg,\n        score: score\n      })\n    }\n    else if (clickedImg.includes(name) && score > highscore) {\n      let score = 0\n      let newArray = this.shuffle(this.state.friends)\n      let highscore = this.state.score\n      let clickedImg = []\n      this.setState({\n        friends: newArray,\n        clickedImg: clickedImg,\n        score: score,\n        highscore: highscore\n      })\n      if (this.state.score === 16) {\n        alert(\"You've completed the memory challenge!\")\n      } else {\n        alert(\"You already selected this character! New High Score!!!\")\n      }\n    }\n    else if (clickedImg.includes(name) && score <= highscore) {\n      let score = 0\n      let newArray = this.shuffle(this.state.friends)\n      let clickedImg = []\n      this.setState({\n        friends: newArray,\n        clickedImg: clickedImg,\n        score: score\n      })\n      if (this.state.score === 16) {\n        alert(\"You've completed the memory challenge! See you can do it again!\")\n      } else {\n        alert(\"You already selected this character! Try again....\")\n      }\n\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <img className=\"logo\" src=\"http://img05.deviantart.net/cef3/i/2015/122/c/4/dragon_ball_z__dbz__nuevo_logo_by_saodvd-d8rx6aw.png\"></img>\n        <h2 className=\"gameName\">Memory Challenge</h2>\n        <Wrapper>\n          {\n            this.state.friends.map((friend, index) => {\n              return (\n                <div className=\"col-6 col-sm-6 col-md-4 col-lg-2 col-xl-2\">\n\n                  <ImgCard name={friend.name} image={friend.image} key={index} handleClick={this.handleClick} />\n                </div>\n              )\n            })\n          }\n        </Wrapper>\n        <Score score={this.state.score} highscore={this.state.highscore} />\n        <Footer />\n      </div>\n    );\n  }\n\n}\n\nexport default Game","import React from 'react';\nimport './App.css';\nimport Game from \"./components/Game\"\n\nfunction App() {\n  return(\n    <div className=\"App\">\n      <Game />\n    </div>\n\n  )\n\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}